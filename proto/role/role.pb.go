// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/role/role.proto

package libgo_rbac_role

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Permission struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Permission) Reset()         { *m = Permission{} }
func (m *Permission) String() string { return proto.CompactTextString(m) }
func (*Permission) ProtoMessage()    {}
func (*Permission) Descriptor() ([]byte, []int) {
	return fileDescriptor_26e011caf756e89c, []int{0}
}

func (m *Permission) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Permission.Unmarshal(m, b)
}
func (m *Permission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Permission.Marshal(b, m, deterministic)
}
func (m *Permission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Permission.Merge(m, src)
}
func (m *Permission) XXX_Size() int {
	return xxx_messageInfo_Permission.Size(m)
}
func (m *Permission) XXX_DiscardUnknown() {
	xxx_messageInfo_Permission.DiscardUnknown(m)
}

var xxx_messageInfo_Permission proto.InternalMessageInfo

func (m *Permission) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Role struct {
	Id                   int32       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 int32       `protobuf:"varint,2,opt,name=name,proto3" json:"name,omitempty"`
	Permission           *Permission `protobuf:"bytes,3,opt,name=permission,proto3" json:"permission,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Role) Reset()         { *m = Role{} }
func (m *Role) String() string { return proto.CompactTextString(m) }
func (*Role) ProtoMessage()    {}
func (*Role) Descriptor() ([]byte, []int) {
	return fileDescriptor_26e011caf756e89c, []int{1}
}

func (m *Role) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Role.Unmarshal(m, b)
}
func (m *Role) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Role.Marshal(b, m, deterministic)
}
func (m *Role) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Role.Merge(m, src)
}
func (m *Role) XXX_Size() int {
	return xxx_messageInfo_Role.Size(m)
}
func (m *Role) XXX_DiscardUnknown() {
	xxx_messageInfo_Role.DiscardUnknown(m)
}

var xxx_messageInfo_Role proto.InternalMessageInfo

func (m *Role) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Role) GetName() int32 {
	if m != nil {
		return m.Name
	}
	return 0
}

func (m *Role) GetPermission() *Permission {
	if m != nil {
		return m.Permission
	}
	return nil
}

type Id struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Id) Reset()         { *m = Id{} }
func (m *Id) String() string { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()    {}
func (*Id) Descriptor() ([]byte, []int) {
	return fileDescriptor_26e011caf756e89c, []int{2}
}

func (m *Id) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Id.Unmarshal(m, b)
}
func (m *Id) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Id.Marshal(b, m, deterministic)
}
func (m *Id) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Id.Merge(m, src)
}
func (m *Id) XXX_Size() int {
	return xxx_messageInfo_Id.Size(m)
}
func (m *Id) XXX_DiscardUnknown() {
	xxx_messageInfo_Id.DiscardUnknown(m)
}

var xxx_messageInfo_Id proto.InternalMessageInfo

func (m *Id) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Response struct {
	Created              bool     `protobuf:"varint,1,opt,name=created,proto3" json:"created,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_26e011caf756e89c, []int{3}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetCreated() bool {
	if m != nil {
		return m.Created
	}
	return false
}

func init() {
	proto.RegisterType((*Permission)(nil), "libgo.rbac.role.Permission")
	proto.RegisterType((*Role)(nil), "libgo.rbac.role.Role")
	proto.RegisterType((*Id)(nil), "libgo.rbac.role.Id")
	proto.RegisterType((*Response)(nil), "libgo.rbac.role.Response")
}

func init() { proto.RegisterFile("proto/role/role.proto", fileDescriptor_26e011caf756e89c) }

var fileDescriptor_26e011caf756e89c = []byte{
	// 252 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xcf, 0x4a, 0x03, 0x31,
	0x18, 0xc4, 0x77, 0xd7, 0x6a, 0xcb, 0x14, 0x14, 0xbe, 0x5a, 0x58, 0xab, 0x87, 0x12, 0x3c, 0xf4,
	0x14, 0xa1, 0x1e, 0x3c, 0x78, 0x51, 0x3c, 0x94, 0xe2, 0x45, 0xe2, 0x13, 0xec, 0x66, 0x3f, 0x4a,
	0x60, 0xbb, 0x59, 0x92, 0xc5, 0x37, 0xf5, 0x7d, 0x64, 0xe3, 0xbf, 0xd2, 0x68, 0x2f, 0x21, 0xdf,
	0x2f, 0xc3, 0xcc, 0x24, 0xc1, 0xb4, 0x75, 0xb6, 0xb3, 0x37, 0xce, 0xd6, 0x1c, 0x16, 0x19, 0x66,
	0x3a, 0xab, 0x4d, 0xb9, 0xb1, 0xd2, 0x95, 0x85, 0x96, 0x3d, 0x16, 0x57, 0xc0, 0x0b, 0xbb, 0xad,
	0xf1, 0xde, 0xd8, 0x86, 0x4e, 0x91, 0x99, 0x2a, 0x4f, 0xe7, 0xe9, 0xe2, 0x58, 0x65, 0xa6, 0x12,
	0x1b, 0x0c, 0x94, 0xad, 0x79, 0x9f, 0x13, 0x61, 0xd0, 0x14, 0x5b, 0xce, 0xb3, 0x40, 0xc2, 0x9e,
	0xee, 0x81, 0xf6, 0xc7, 0x29, 0x3f, 0x9a, 0xa7, 0x8b, 0xf1, 0xf2, 0x52, 0xee, 0xe5, 0xc9, 0xdf,
	0x30, 0xb5, 0x23, 0x17, 0xe7, 0xc8, 0xd6, 0x55, 0x14, 0x7f, 0x8d, 0x91, 0x62, 0xdf, 0xda, 0xc6,
	0x33, 0xe5, 0x18, 0x6a, 0xc7, 0x45, 0xc7, 0x9f, 0x82, 0x91, 0xfa, 0x1e, 0x97, 0xef, 0x29, 0xc6,
	0x7d, 0xcb, 0x57, 0x76, 0x6f, 0x46, 0x33, 0x3d, 0x00, 0x4f, 0xe1, 0x28, 0x54, 0x9f, 0x46, 0x15,
	0x7a, 0x3c, 0xbb, 0x88, 0xf1, 0x57, 0x92, 0x48, 0xe8, 0x19, 0x93, 0x15, 0x77, 0x8f, 0x5a, 0xb3,
	0xf7, 0x3b, 0xaf, 0xf3, 0x8f, 0xd5, 0xa1, 0x4b, 0x8a, 0x84, 0xee, 0x30, 0x5c, 0x71, 0x17, 0xba,
	0x4c, 0x22, 0xe5, 0xba, 0x9a, 0xfd, 0xed, 0x2a, 0x92, 0xf2, 0x24, 0x7c, 0xd9, 0xed, 0x47, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x38, 0x2c, 0x15, 0xd6, 0xcb, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RoleServiceClient is the client API for RoleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RoleServiceClient interface {
	CreateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Response, error)
	GetAccessPermission(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Permission, error)
	GetRole(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Role, error)
}

type roleServiceClient struct {
	cc *grpc.ClientConn
}

func NewRoleServiceClient(cc *grpc.ClientConn) RoleServiceClient {
	return &roleServiceClient{cc}
}

func (c *roleServiceClient) CreateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/libgo.rbac.role.RoleService/CreateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) GetAccessPermission(ctx context.Context, in *Role, opts ...grpc.CallOption) (*Permission, error) {
	out := new(Permission)
	err := c.cc.Invoke(ctx, "/libgo.rbac.role.RoleService/GetAccessPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) GetRole(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := c.cc.Invoke(ctx, "/libgo.rbac.role.RoleService/GetRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleServiceServer is the server API for RoleService service.
type RoleServiceServer interface {
	CreateRole(context.Context, *Role) (*Response, error)
	GetAccessPermission(context.Context, *Role) (*Permission, error)
	GetRole(context.Context, *Id) (*Role, error)
}

func RegisterRoleServiceServer(s *grpc.Server, srv RoleServiceServer) {
	s.RegisterService(&_RoleService_serviceDesc, srv)
}

func _RoleService_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libgo.rbac.role.RoleService/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).CreateRole(ctx, req.(*Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_GetAccessPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).GetAccessPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libgo.rbac.role.RoleService/GetAccessPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).GetAccessPermission(ctx, req.(*Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/libgo.rbac.role.RoleService/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).GetRole(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _RoleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "libgo.rbac.role.RoleService",
	HandlerType: (*RoleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRole",
			Handler:    _RoleService_CreateRole_Handler,
		},
		{
			MethodName: "GetAccessPermission",
			Handler:    _RoleService_GetAccessPermission_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _RoleService_GetRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/role/role.proto",
}
